// Author: Hugo W.L. ter Doest
// This work is licensed under a Creative Commons Attribution Share-Alike 4.0 License. - See more at: http://creativecommons.org/licenses/by-sa/4.0/

// Based on: http://www.scientificpsychic.com/grammar/enggram1.html
// Formalism: Context-free Grammar

Z -> ENGLISH_SENTENCE

// <English Sentence> = <Simple Sentence> | <Compound Sentence>
ENGLISH_SENTENCE -> SIMPLE_SENTENCE
ENGLISH_SENTENCE -> COMPOUND_SENTENCE

// <Simple Sentence> = <Declarative Sentence> | <Interrogative Sentence> | 
//                     <Imperative Sentence> | <Conditional Sentence>
SIMPLE_SENTENCE -> DECLARATIVE_SENTENCE
SIMPLE_SENTENCE -> INTERROGATIVE_SENTENCE
SIMPLE_SENTENCE -> IMPERATIVE_SENTENCE
SIMPLE_SENTENCE -> CONDITIONAL_SENTENCE
SIMPLE_SENTENCE -> NOUN_PHRASE
SIMPLE_SENTENCE -> PREPOSITIONAL_PHASE

// <Compound Sentence> = <Simple Sentence> <conjunction> <Simple Sentence> |
//                       "Either" <Declarative Sentence> "or" <Declarative Sentence> |
//                       "Either" <Imperative Sentence> "or" <Imperative Sentence>
COMPOUND_SENTENCE -> SIMPLE_SENTENCE *CC* SIMPLE_SENTENCE
COMPOUND_SENTENCE -> EITHER DECLARATIVE_SENTENCE *OR* DECLARATIVE_SENTENCE
COMPOUND_SENTENCE -> EITHER IMPERATIVE_SENTENCE *OR* IMPERATIVE_SENTENCE

// <Declarative Sentence> = <subject> <predicate>
DECLARATIVE_SENTENCE -> SUBJECT PREDICATE

// <Interrogative Sentence> = <Declarative Sentence>"?"
INTERROGATIVE_SENTENCE -> SUBJECT *PREDICATE* PUNCT_QM

// <Interrogative Sentence> = "Who" <predicate>"?"
// Where the verb of the predicate is in 3rd person form.
INTERROGATIVE_SENTENCE -> WHO *PREDICATE* PUNCT_QM

// ("What" |"Which") [<adverb>* <adjective>] <noun> <predicate>"?"
INTERROGATIVE_SENTENCE -> WHAT NOUN *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHAT ADV_ADJ NOUN *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> WHICH NOUN *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH ADV_ADJ NOUN *PREDICATE* PUNCT_QM

WH_WORD -> WHAT
WH_WORD -> WHEN
WH_WORD -> WHERE
WH_WORD -> WHO
WH_WORD -> TO WHOM
WH_WORD -> WHY
WH_WORD -> HOW

// <Interrogative Sentence> = ["What" |"When" |"Where" |"Who" |"To whom" |"Why"]
//   ("do" |"does" |"don't" |"doesn't" |"did" |"didn't") <subject> <predicate>"?"
// The verb of the predicate must be infinitive (Vinf).
INTERROGATIVE_SENTENCE -> DO SUBJECT *PREDICAT*E PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD DO SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> DOES SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD DOES SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> DONT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD DONT SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> DOESNT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD DOESNT SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> DID SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD DID SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> DIDNT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD DIDNT SUBJECT *PREDICATE* PUNCT_QM

// <Interrogative Sentence> = "Which" [<noun phrase>] 
// ("do" |"does" |"don't" |"doesn't" |"did" |"didn't") <subject> <predicate>"?"
// The verb of the predicate must be infinitive (Vinf).
INTERROGATIVE_SENTENCE -> WHICH NOUN_PHRASE DO SUBJECT PREDICATE PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH NOUN_PHRASE DOES SUBJECT PREDICATE PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH NOUN_PHRASE DONT SUBJECT PREDICATE PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH NOUN_PHRASE DOESNT SUBJECT PREDICATE PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH NOUN_PHRASE DID SUBJECT PREDICATE PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH NOUN_PHRASE DIDNT SUBJECT PREDICATE PUNCT_QM

// <Interrogative Sentence> = ["What" |"Which" |"When" |"Where" |"Who" |"To whom" |"Why"]
//             ("will" |"won't") <subject> <predicate>"?" 
// The verb in the predicate must must follow these patterns:
//       "have" <Vpastp>
//       "have" "been" <Ving>
//       "be" <Ving>
//       <Vinf>
INTERROGATIVE_SENTENCE -> WILL SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD WILL SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH WILL SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> WONT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD WONT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH WONT SUBJECT *PREDICATE* PUNCT_QM

// <Interrogative Sentence> = 
//             ["What" |"Which" |"When" |"Where" |"Who" |"To whom" | "Why"]
//             ("has" |"have" |"hasn't" |"haven't")
//             <subject> <predicate>"?"
// Verb in the predicate must be past participle <Vpastp>
INTERROGATIVE_SENTENCE -> HAS SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD HAS SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH HAS SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> HAVE SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD HAVE SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH HAVE SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> HASNT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD HASNT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH HASNT SUBJECT *PREDICATE* PUNCT_QM

INTERROGATIVE_SENTENCE -> HAVENT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD HAVENT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH HAVENT SUBJECT *PREDICATE* PUNCT_QM

// <Interrogative Sentence> = 
//   ["What" |"Which" |"When" |"Where" |"Who" |"To whom" | "Why"]
//             ("are" |"is" |"was" |"were" |
//             "aren't" |"isn't" |"wasn't" |"weren't")
//             <subject>
//             [<adverb>* <adjective> | <prep phr>* | <predicate>]"?"
// Verb in the predicate must be present participle <Ving> or past participle <Vpastp>
// ARE
INTERROGATIVE_SENTENCE -> *ARE* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ARE* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ARE* SUBJECT PUNCT_QM

INTERROGATIVE_SENTENCE -> *ARE* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ARE* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ARE* SUBJECT ADV_ADJ PUNCT_QM

INTERROGATIVE_SENTENCE -> *ARE* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ARE* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ARE* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM

INTERROGATIVE_SENTENCE -> ARE SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD ARE SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH ARE SUBJECT *PREDICATE* PUNCT_QM

// IS
INTERROGATIVE_SENTENCE -> *IS* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *IS* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *IS* SUBJECT PUNCT_QM

INTERROGATIVE_SENTENCE -> *IS* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *IS* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *IS* SUBJECT ADV_ADJ PUNCT_QM

INTERROGATIVE_SENTENCE -> *IS* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *IS* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *IS* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM

INTERROGATIVE_SENTENCE -> IS SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD IS SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH IS SUBJECT *PREDICATE* PUNCT_QM

// WAS
INTERROGATIVE_SENTENCE -> *WAS* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WAS* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WAS* SUBJECT PUNCT_QM

INTERROGATIVE_SENTENCE -> *WAS* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WAS* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WAS* SUBJECT ADV_ADJ PUNCT_QM

INTERROGATIVE_SENTENCE -> *WAS* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WAS* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WAS* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM

INTERROGATIVE_SENTENCE -> WAS SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD WAS SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH WAS SUBJECT *PREDICATE* PUNCT_QM

// WERE
INTERROGATIVE_SENTENCE -> *WERE* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WERE* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WERE* SUBJECT PUNCT_QM

INTERROGATIVE_SENTENCE -> *WERE* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WERE* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WERE* SUBJECT ADV_ADJ PUNCT_QM

INTERROGATIVE_SENTENCE -> *WERE* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WERE* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WERE* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM

INTERROGATIVE_SENTENCE -> WERE SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD WERE SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH WERE SUBJECT *PREDICATE* PUNCT_QM

// ARENT
INTERROGATIVE_SENTENCE -> *ARENT* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ARENT* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ARENT* SUBJECT PUNCT_QM

INTERROGATIVE_SENTENCE -> *ARENT* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ARENT* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ARENT* SUBJECT ADV_ADJ PUNCT_QM

INTERROGATIVE_SENTENCE -> *ARENT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ARENT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ARENT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM

INTERROGATIVE_SENTENCE -> ARENT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD ARENT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH ARENT SUBJECT *PREDICATE* PUNCT_QM

// ISNT
INTERROGATIVE_SENTENCE -> *ISNT* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ISNT* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ISNT* SUBJECT PUNCT_QM

INTERROGATIVE_SENTENCE -> *ISNT* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ISNT* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ISNT* SUBJECT ADV_ADJ PUNCT_QM

INTERROGATIVE_SENTENCE -> *ISNT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *ISNT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *ISNT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM

INTERROGATIVE_SENTENCE -> ISNT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD ISNT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH ISNT SUBJECT *PREDICATE* PUNCT_QM

// WASNT
INTERROGATIVE_SENTENCE -> *WASNT* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WASNT* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WASNT* SUBJECT PUNCT_QM

INTERROGATIVE_SENTENCE -> *WASNT* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WASNT* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WASNT* SUBJECT ADV_ADJ PUNCT_QM

INTERROGATIVE_SENTENCE -> *WASNT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WASNT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WASNT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM

INTERROGATIVE_SENTENCE -> WASNT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD WASNT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH WASNT SUBJECT *PREDICATE* PUNCT_QM

// WERENT
INTERROGATIVE_SENTENCE -> *WERENT* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WERENT* SUBJECT PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WERENT* SUBJECT PUNCT_QM

INTERROGATIVE_SENTENCE -> *WERENT* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WERENT* SUBJECT ADV_ADJ PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WERENT* SUBJECT ADV_ADJ PUNCT_QM

INTERROGATIVE_SENTENCE -> *WERENT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD *WERENT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH *WERENT* SUBJECT PREPOSITIONAL_PHRASES PUNCT_QM

INTERROGATIVE_SENTENCE -> WERENT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WH_WORD WERENT SUBJECT *PREDICATE* PUNCT_QM
INTERROGATIVE_SENTENCE -> WHICH WERENT SUBJECT *PREDICATE* PUNCT_QM

// <Imperative Sentence> = <predicate> = <verb>  <complement>
// Imperative sentences consist of predicates that only contain verbs in 
// infinitive form; verb phrases are not allowed.
IMPERATIVE_SENTENCE -> PREDICATE 

// <Dependent Clause> = ("if" | "when") <Declarative Sentence>
DEPENDENT_CLAUSE -> *IF* DECLARATIVE_SENTENCE
DEPENDENT_CLAUSE -> *WHEN* DECLARATIVE_SENTENCE

// <Independent Clause> = <Declarative Sentence> | <Interrogative Sentence>
INDEPENDENT_CLAUSE -> DECLARATIVE_SENTENCE
INDEPENDENT_CLAUSE -> INTERROGATIVE_SENTENCE

// <Conditional Sentence> = 
//    <Dependent Clause>"," <Independent Clause> |
//    <Independent Clause> <Dependent Clause>
CONDITIONAL_SENTENCE -> DEPENDENT_CLAUSE *PUNCT_COMMA* INDEPENDENT_CLAUSE
CONDITIONAL_SENTENCE -> *INDEPENDENT_CLAUSE* DEPENDENT_CLAUSE

// <subject> = <simple subject> | <compound subject>
SUBJECT -> SIMPLE_SUBJECT
SUBJECT -> COMPOUND_SUBJECT

// <simple subject> = <noun phrase> | <nominative personal pronoun>
SIMPLE_SUBJECT -> NOUN_PHRASE
SIMPLE_SUBJECT -> PRP

// <compound subject> = <simple subject> ("and" | "or") <simple subject>
COMPOUND_SUBJECT -> SIMPLE_SUBJECT *AND* SIMPLE_SUBJECT
COMPOUND_SUBJECT -> SIMPLE_SUBJECT *OR* SIMPLE_SUBJECT

// <compound subject> = "Either" <simple subject> "or" <simple subject>
COMPOUND_SUBJECT -> EITHER SIMPLE_SUBJECT *OR* SIMPLE_SUBJECT

// <compound subject> = "Neither" <simple subject> "nor" <simple subject> 
COMPOUND_SUBJECT -> NEITHER SIMPLE_SUBJECT *NOR* SIMPLE_SUBJECT

// <noun phrase> = "the" <specific proper noun>
NOUN_PHRASE -> *THE* NNP
NOUN_PHRASE -> *THE* NNPS

// <noun phrase> = <proper noun>
NOUN_PHRASE -> NNP
NOUN_PHRASE -> NNPS

// <noun phrase> = <non-personal pronoun>

// <noun phrase> = <article> [<adverb>* <adjective>] <noun>
// Added rules for optional article
NOUN_PHRASE -> NOUN
NOUN_PHRASE -> ADV_ADJ *NOUN*
NOUN_PHRASE -> DT *NOUN*
NOUN_PHRASE -> DT ADV_ADJ *NOUN*

// <noun phrase> = [<adverb>* <adjective>] <noun-plural>
NOUN_PHRASE -> NOUN_PLURAL
NOUN_PHRASE -> ADV_ADJ NOUN_PLURAL

// <noun phrase> = <proper noun-possessive> [<adverb>* <adjective>] <noun>
NOUN_PHRASE -> NNP POS *NOUN*
NOUN_PHRASE -> NNP POS ADV_ADJ *NOUN*

// <noun phrase> = <personal possessive adjective> [<adverb>* <adjective>] <noun>
NOUN_PHRASE -> PRP$ *NOUN*
NOUN_PHRASE -> PRP$ ADV_ADJ *NOUN*

// <article> <common noun-possessive> [<adverb>* <adjective>] <noun> 
NOUN_PHRASE -> DT NOUN POS *NOUN*
NOUN_PHRASE -> DT NOUN POS ADV_ADJ *NOUN*

// Combination of adverbs and adjectives
ADV_ADJ -> ADJECTIVES
ADV_ADJ -> ADVERBS *ADJECTIVES*

// One or more adverbs
ADVERBS -> *RB* ADVERBS
ADVERBS -> RB

ADJECTIVES -> ADJECTIVE CC ADJECTIVES
ADJECTIVES -> *JJ* ADJECTIVES
ADJECTIVES -> JJ

// <noun> = <noun> [<prep phr>*]
NOUN -> NN
NOUN -> *NN* PREPOSITIONAL_PHRASES
NOUN -> NNS
NOUN -> *NNS* PREPOSITIONAL_PHRASES

// <predicate> = (<verb> | <verb phrase>) <complement>
PREDICATE -> VERB
PREDICATE -> VERB_PHRASE
PREDICATE -> *VERB* COMPLEMENT 
PREDICATE -> *VERB_PHRASE* COMPLEMENT
// PP ambiguity
PREDICATE -> *VERB* COMPLEMENT PREPOSITIONAL_PHRASES
PREDICATE -> *VERB_PHRASE* COMPLEMENT PREPOSITIONAL_PHRASES

// <complement> = [[<indirect object>] <object>]
COMPLEMENT -> OBJECT
COMPLEMENT -> INDIRECT_OBJECT *OBJECT*

// <complement> = [<adverb>* <adjective>]
COMPLEMENT -> ADV_ADJ

// <complement> = [<prep phr>*] |
COMPLEMENT -> PREPOSITIONAL_PHRASES

// <complement> = ["to" <Vinf> [<object>]]
COMPLEMENT -> TO *VB*
COMPLEMENT -> TO *VB* OBJECT

// <complement> = [<Ving>] 
COMPLEMENT -> VBG

// <indirect object> = <object> = <simple object> | <compound object> 
INDIRECT_OBJECT -> OBJECT
OBJECT -> SIMPLE_OBJECT
OBJECT -> COMPOUND_OBJECT

// <compound object> = <simple object> ("and" | "or") <simple object>
COMPOUND_OBJECT ->  SIMPLE_OBJECT *CC* COMPOUND_OBJECT

// <simple object> = <noun phrase> | <objective personal pronoun>
SIMPLE_OBJECT -> NOUN_PHRASE
SIMPLE_OBJECT -> PRP

// <prep phr> = <preposition> <object>
PREPOSITIONAL_PHRASES -> IN *OBJECT*
PREPOSITIONAL_PHRASES -> TO *OBJECT*
PREPOSITIONAL_PHRASES -> IN *OBJECT* PREPOSITIONAL_PHRASES
PREPOSITIONAL_PHRASES -> TO *OBJECT* PREPOSITIONAL_PHRASES

// Verb phrase
// <verb> = <V1s> |<V2s> |<V3s> |<V1p> |<V2p> |<V3p> |<Vpast> |<linking verb>
VERB -> VB
VERB -> VBP
VERB -> VBZ
VERB -> VBD
VERB -> LINKING_VERB

//<linking verb> = "am" |"are" |"is" | "was"| "were" | "look" | "looks" |
// "looked" | "become" | "became" | "become" | ...
// Also known as copulae; in Dutch called "koppelwerkwoorden"
LINKING_VERB -> AM
LINKING_VERB -> ARE
LINKING_VERB -> IS
LINKING_VERB -> WAS
LINKING_VERB -> LOOK
LINKING_VERB -> LOOKS
LINKING_VERB -> LOOKED
LINKING_VERB -> BECOME
LINKING_VERB -> BECAME

//<verb phrase> = ("had" |"have" |"has") ["not"] <Vpastp>
VERB_PHRASE -> HAD *VBN*
VERB_PHRASE -> HAVE *VBN*
VERB_PHRASE -> HAS *VBN*
VERB_PHRASE -> HAD NOT *VBN*
VERB_PHRASE -> HAVE NOT *VBN*
VERB_PHRASE -> HAS NOT *VBN*

//<verb phrase> = ("had" |"have" |"has") ["not"] "been" [<Vpastp> | <Ving>]
VERB_PHRASE -> HAD BEEN *VBN*
VERB_PHRASE -> HAVE BEEN *VBN*
VERB_PHRASE -> HAS BEEN *VBN*
VERB_PHRASE -> HAD NOT BEEN *VBN*
VERB_PHRASE -> HAVE NOT BEEN *VBN*
VERB_PHRASE -> HAS NOT BEEN *VBN*
VERB_PHRASE -> HAD BEEN *VBG*
VERB_PHRASE -> HAVE BEEN *VBG*
VERB_PHRASE -> HAS BEEN *VBG*
VERB_PHRASE -> HAD NOT BEEN *VBG*
VERB_PHRASE -> HAVE NOT BEEN *VBG*
VERB_PHRASE -> HAS NOT BEEN *VBG*

//<verb phrase> = <auxV> ["not"] "have" <Vpastp>
VERB_PHRASE -> AUX_VERB HAVE *VBN*
VERB_PHRASE -> AUX_VERB NOT HAVE *VBN*

//<verb phrase> = <auxV> ["not"] "have" "been" [<Vpastp> | <Ving>]
VERB_PHRASE -> AUX_VERB HAVE BEEN *VBN*
VERB_PHRASE -> AUX_VERB not HAVE BEEN *VBN*
VERB_PHRASE -> AUX_VERB HAVE BEEN *VBG*
VERB_PHRASE -> AUX_VERB not HAVE BEEN *VBG*

//<verb phrase> = <auxV> ["not"] "be" [<Vpastp> | <Ving>]
VERB_PHRASE -> AUX_VERB BE *VBN*
VERB_PHRASE -> AUX_VERB NOT BE *VBN*
VERB_PHRASE -> AUX_VERB BE *VBG*
VERB_PHRASE -> AUX_VERB NOT BE *VBG*

//<verb phrase> = <auxV> ["not"] <Vinf>
VERB_PHRASE -> AUX_VERB *VB*
VERB_PHRASE -> AUX_VERB NOT *VB*

// <auxV> = "must" | "may" |"might" | "will" |"would" |"shall" |
//       "should" |"can" |"could"
AUX_VERB -> MUST
AUX_VERB -> MAY
AUX_VERB -> MIGHT
AUX_VERB -> WILL
AUX_VERB -> WOULD
AUX_VERB -> SHALL
AUX_VERB -> SHOULD
AUX_VERB -> CAN
AUX_VERB -> COULD

//<verb phrase> = "ought" ("to" | "not") <Vinf>
VERB_PHRASE -> OUGHT TO *VB*
VERB_PHRASE -> OUGHT NOT *VB*

//<verb phrase> = "ought" ("to" | "not") "be" [<Vpastp> | <Ving>]
VERB_PHRASE -> OUGHT TO BE *VBN*
VERB_PHRASE -> OUGHT NOT BE *VBN*
VERB_PHRASE -> OUGHT TO BE *VBG*
VERB_PHRASE -> OUGHT NOT BE *VBG*
VERB_PHRASE -> OUGHT TO *BE*
VERB_PHRASE -> OUGHT NOT *BE*

//<verb phrase> = "ought" ("to" | "not") "have" <Vpastp>
VERB_PHRASE -> OUGHT TO HAVE *VBN*
VERB_PHRASE -> OUGHT NOT HAVE *VBN*

//<verb phrase> = "ought" ("to" | "not") "have" "been" [<Vpastp> | <Ving>]
VERB_PHRASE -> OUGHT TO HAVE BEEN *VBN*
VERB_PHRASE -> OUGHT NOT HAVE BEEN *VBN*
VERB_PHRASE -> OUGHT TO HAVE BEEN *VBG*
VERB_PHRASE -> OUGHT NOT HAVE BEEN *VBG*
VERB_PHRASE -> OUGHT TO HAVE *BEEN*
VERB_PHRASE -> OUGHT NOT HAVE *BEEN*

//<verb phrase> = ("do" |"does" |"did") ["not"] [<Vinf>]
VERB_PHRASE -> DO *VB*
VERB_PHRASE -> DOES *VB*
VERB_PHRASE -> DID *VB*
VERB_PHRASE -> DO NOT *VB*
VERB_PHRASE -> DOES NOT *VB*
VERB_PHRASE -> DID NOT *VB*

//<verb phrase> = ("am" |"are" |"is" |"was" |"were") ["not"] [<Vpastp> | <Ving>]
VERB_PHRASE -> AM *VBN*
VERB_PHRASE -> ARE *VBN*
VERB_PHRASE -> IS *VBN*
VERB_PHRASE -> WAS *VBN*
VERB_PHRASE -> WERE *VBN*
VERB_PHRASE -> AM *VBG*
VERB_PHRASE -> ARE *VBG*
VERB_PHRASE -> IS *VBG*
VERB_PHRASE -> WAS *VBG*
VERB_PHRASE -> WERE *VBG*
VERB_PHRASE -> AM NOT *VBN*
VERB_PHRASE -> ARE NOT *VBN*
VERB_PHRASE -> IS NOT *VBN*
VERB_PHRASE -> WAS NOT *VBN*
VERB_PHRASE -> WERE NOT *VBN*
VERB_PHRASE -> AM NOT *VBG*
VERB_PHRASE -> ARE NOT *VBG*
VERB_PHRASE -> IS NOT *VBG*
VERB_PHRASE -> WAS NOT *VBG*
VERB_PHRASE -> WERE NOT *VBG*

//<verb phrase> = ("am" |"are" |"is" |"was" |"were") ["not"] "being" [<Vpastp>]
VERB_PHRASE -> AM BEING *VBN*
VERB_PHRASE -> ARE BEING *VBN*
VERB_PHRASE -> IS BEING *VBN*
VERB_PHRASE -> WAS BEING *VBN*
VERB_PHRASE -> WERE BEING *VBN*
VERB_PHRASE -> AM BEING *VBG*
VERB_PHRASE -> ARE BEING *VBG*
VERB_PHRASE -> IS BEING *VBG*
VERB_PHRASE -> WAS BEING *VBG*
VERB_PHRASE -> WERE BEING *VBG*
VERB_PHRASE -> AM BEING NOT *VBN*
VERB_PHRASE -> ARE BEING NOT *VBN*
VERB_PHRASE -> IS BEING NOT *VBN*
VERB_PHRASE -> WAS BEING NOT *VBN*
VERB_PHRASE -> WERE BEING NOT *VBN*
VERB_PHRASE -> AM BEING NOT *VBG*
VERB_PHRASE -> ARE BEING NOT *VBG*
VERB_PHRASE -> IS BEING NOT *VBG*
VERB_PHRASE -> WAS BEING NOT *VBG*
VERB_PHRASE -> WERE BEING NOT *VBG*

//<verb phrase> = ("am" |"are" |"is" |"was" |"were") ["not"] "going" "to" [<Vinf>]
VERB_PHRASE -> AM GOING TO *VB*
VERB_PHRASE -> ARE GOING TO *VB*
VERB_PHRASE -> IS GOING TO *VB*
VERB_PHRASE -> WAS GOING TO *VB*
VERB_PHRASE -> WERE GOING TO *VB*
VERB_PHRASE -> AM GOING TO *VB*
VERB_PHRASE -> ARE GOING TO *VB*
VERB_PHRASE -> IS GOING TO *VB*
VERB_PHRASE -> WAS GOING TO *VB*
VERB_PHRASE -> WERE GOING TO *VB*
VERB_PHRASE -> AM NOT GOING TO *VB*
VERB_PHRASE -> ARE NOT GOING TO *VB*
VERB_PHRASE -> IS NOT GOING TO *VB*
VERB_PHRASE -> WAS NOT GOING TO *VB*
VERB_PHRASE -> WERE NOT GOING TO *VB*
VERB_PHRASE -> AM NOT GOING TO *VB*
VERB_PHRASE -> ARE NOT GOING TO *VB*
VERB_PHRASE -> IS NOT GOING TO *VB*
VERB_PHRASE -> WAS NOT GOING TO *VB*
VERB_PHRASE -> WERE NOT GOING TO *VB*